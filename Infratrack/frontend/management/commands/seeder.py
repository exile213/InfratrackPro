from django.core.management.base import BaseCommand
from django.utils import timezone
from frontend.models import Agency, IssueType, RoadType, Report, Role, Users

import random

class Command(BaseCommand):
    help = 'Seed database with test data'

    def handle(self, *args, **kwargs):
        self.stdout.write("üîÅ Seeding...")

        # Clear old test data
        Users.objects.all().delete()
        Agency.objects.all().delete()
        IssueType.objects.all().delete()
        RoadType.objects.all().delete()
        Report.objects.all().delete()
        Role.objects.all().delete()

        # Create roles
        roles = [
            Role.objects.create(name='Admin'),
            Role.objects.create(name='Agency Staff'),
            Role.objects.create(name='Citizen')
        ]
        self.stdout.write("‚úÖ Roles created.")

        # Agencies
        agencies = [
            Agency.objects.create(
                name='DPWH',
                city='Manila',
                coverage_area='Metro Manila',
                contact_email='dpwh@example.com',
                contact_phone='123-456-7890'
            ),
            Agency.objects.create(
                name='City Engineering Office',
                city='Manila',
                coverage_area='Manila City',
                contact_email='ceo@example.com',
                contact_phone='098-765-4321'
            ),
        ]
        self.stdout.write("‚úÖ Agencies created.")

        # Issue Types
        issue_names = ['Pothole', 'Drainage Blockage', 'Faded Markings', 'Broken Signage']
        issue_types = [IssueType.objects.create(name=issue, description=f'Description for {issue}') for issue in issue_names]
        self.stdout.write("‚úÖ Issue types created.")

        # Road Types
        road_names = ['Concrete', 'Asphalt', 'Gravel']
        road_types = [RoadType.objects.create(name=road, description=f'Description for {road} road') for road in road_names]
        self.stdout.write("‚úÖ Road types created.")

        # Users (linked to agencies logically)
        usernames = ['dpwh_john', 'ceo_maria']
        emails = ['john@dpwh.gov.ph', 'maria@ceo.gov.ph']
        passwords = ['password123', 'password123']
        full_names = ['John Doe', 'Maria Santos']

        users = []
        for i in range(2):
            user = Users.objects.create(
                username=usernames[i],
                email=emails[i],
                password=passwords[i],
                full_name=full_names[i],
                role_user=roles[1],  # Agency Staff role
                agency=agencies[i],
                is_active=True
            )
            users.append(user)
        self.stdout.write("‚úÖ Users created.")

        # Reports
        locations = ['Brgy. San Jose', 'Narra St.', 'Main Ave', 'Pine Rd.', 'Zone 4']
        for _ in range(10):
            Report.objects.create(
                tracking_code=f'TRK{random.randint(1000, 9999)}',
                description='This is a test report generated by seed script.',
                photo_url='https://example.com/test-photo.jpg',
                latitude=14.5995,
                longitude=120.9842,
                address=random.choice(locations),
                road_name=random.choice(locations),
                assigned_agency=random.choice(agencies),
                status_report_status=random.choice(['pending', 'in_progress', 'resolved']),
                citizen_name='Test Citizen',
                citizen_email='citizen@example.com',
                issue_type=random.choice(issue_types),
                road_type=random.choice(road_types)
            )
        self.stdout.write("‚úÖ Reports created.")

        self.stdout.write(self.style.SUCCESS("üå± Database seeding completed!")) 